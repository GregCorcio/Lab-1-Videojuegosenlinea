using UnityEngine;

public class MenuManager : MonoBehaviour
{
    // Implementación del patrón Singleton
    public static MenuManager Instance;

    // Lista de menús que gestionaremos
    [SerializeField] private MenuVisibility[] menus;

    private void Awake()
    {
        // Aseguramos que solo haya una instancia de MenuManager en la escena
        if (Instance == null)
        {
            Instance = this;
        }
        else
        {
            Destroy(gameObject);
        }
    }

    // Método para abrir un menú por su nombre
    public void OpenMenuName(string menuName)
    {
        for (int i = 0; i < menus.Length; i++)
        {
            // Si el nombre del menú coincide, lo hacemos visible
            if (menus[i].nameMenu == menuName)
            {
                menus[i].Visible(); // Abrimos el menú
            }
            else if (menus[i].isOpen) // Si el menú está abierto, lo cerramos
            {
                CloseMenu(menus[i]);
            }
        }
    }

    // Método para abrir un menú específico
    public void OpenMenu(MenuVisibility menu)
    {
        // Cerramos otros menús si están abiertos
        for (int i = 0; i < menus.Length; i++)
        {
            if (menus[i].isOpen)
            {
                CloseMenu(menus[i]);
            }
        }
        
        // Abrimos el menú específico
        menu.Visible();
    }

    // Método para cerrar un menú específico
    public void CloseMenu(MenuVisibility menu)
    {
        menu.NoVisible(); // Desactivamos el menú
    }
}
